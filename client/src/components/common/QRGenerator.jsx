// src/components/common/QRGenerator.jsx
import { useState, useEffect, useRef } from 'react';
import { motion } from 'framer-motion';
import { 
  QrCodeIcon,
  ArrowDownTrayIcon,
  PrinterIcon,
  ShareIcon,
  CheckCircleIcon,
  XMarkIcon
} from '@heroicons/react/24/outline';
import QRCode from 'qrcode';
import { toast } from 'react-hot-toast';

const QRGenerator = ({ 
  data, 
  size = 256, 
  title = "QR Code",
  subtitle = "",
  showActions = true,
  onClose
}) => {
  const [qrCodeUrl, setQrCodeUrl] = useState('');
  const [loading, setLoading] = useState(true);
  const canvasRef = useRef(null);

  useEffect(() => {
    generateQRCode();
  }, [data, size]);

  const generateQRCode = async () => {
    if (!data) return;

    setLoading(true);
    try {
      const qrString = typeof data === 'string' ? data : JSON.stringify(data);
      const url = await QRCode.toDataURL(qrString, {
        width: size,
        margin: 2,
        color: {
          dark: '#1f2937', // Dark gray
          light: '#ffffff' // White
        },
        errorCorrectionLevel: 'M'
      });
      setQrCodeUrl(url);
    } catch (error) {
      console.error('Error generating QR code:', error);
      toast.error('Failed to generate QR code');
    } finally {
      setLoading(false);
    }
  };

  const downloadQR = () => {
    if (!qrCodeUrl) return;

    const link = document.createElement('a');
    link.href = qrCodeUrl;
    link.download = `${title.toLowerCase().replace(/\s+/g, '-')}-qr-code.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    toast.success('QR code downloaded');
  };

  const printQR = () => {
    if (!qrCodeUrl) return;

    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
      <html>
        <head>
          <title>Print QR Code - ${title}</title>
          <style>
            body {
              margin: 0;
              padding: 20px;
              font-family: Arial, sans-serif;
              text-align: center;
            }
            .container {
              max-width: 400px;
              margin: 0 auto;
            }
            h1 {
              color: #1f2937;
              margin-bottom: 10px;
            }
            p {
              color: #6b7280;
              margin-bottom: 20px;
            }
            img {
              max-width: 100%;
              height: auto;
            }
            @media print {
              body { margin: 0; }
            }
          </style>
        </head>
        <body>
          <div class="container">
            <h1>${title}</h1>
            ${subtitle ? `<p>${subtitle}</p>` : ''}
            <img src="${qrCodeUrl}" alt="QR Code" />
            <p style="margin-top: 20px; font-size: 12px;">
              Generated by MessMate<br>
              ${new Date().toLocaleString()}
            </p>
          </div>
        </body>
      </html>
    `);
    printWindow.document.close();
    printWindow.print();
  };

  const shareQR = async () => {
    if (!qrCodeUrl) return;

    try {
      // Convert data URL to blob
      const response = await fetch(qrCodeUrl);
      const blob = await response.blob();
      const file = new File([blob], `${title}-qr-code.png`, { type: 'image/png' });

      if (navigator.share && navigator.canShare({ files: [file] })) {
        await navigator.share({
          title: title,
          text: subtitle,
          files: [file]
        });
        toast.success('QR code shared');
      } else {
        // Fallback: copy to clipboard
        await navigator.clipboard.writeText(qrCodeUrl);
        toast.success('QR code copied to clipboard');
      }
    } catch (error) {
      console.error('Error sharing QR code:', error);
      toast.error('Failed to share QR code');
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
      exit={{ opacity: 0, scale: 0.9 }}
      className="bg-white rounded-xl p-6 max-w-sm w-full mx-auto"
    >
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
          {subtitle && <p className="text-sm text-gray-600">{subtitle}</p>}
        </div>
        {onClose && (
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <XMarkIcon className="h-5 w-5" />
          </button>
        )}
      </div>

      {/* QR Code Display */}
      <div className="text-center mb-6">
        {loading ? (
          <div className="flex flex-col items-center justify-center h-64">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-4"></div>
            <p className="text-sm text-gray-600">Generating QR code...</p>
          </div>
        ) : qrCodeUrl ? (
          <div className="inline-block p-4 bg-white border-2 border-gray-200 rounded-lg shadow-sm">
            <img 
              src={qrCodeUrl} 
              alt="QR Code" 
              className="max-w-full h-auto"
              style={{ width: size, height: size }}
            />
          </div>
        ) : (
          <div className="flex flex-col items-center justify-center h-64 text-gray-400">
            <QrCodeIcon className="h-16 w-16 mb-4" />
            <p className="text-sm">Failed to generate QR code</p>
          </div>
        )}
      </div>

      {/* Action Buttons */}
      {showActions && qrCodeUrl && (
        <div className="space-y-3">
          <div className="grid grid-cols-3 gap-3">
            <button
              onClick={downloadQR}
              className="flex flex-col items-center justify-center p-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
            >
              <ArrowDownTrayIcon className="h-5 w-5 text-gray-600 mb-1" />
              <span className="text-xs text-gray-600">Download</span>
            </button>
            <button
              onClick={printQR}
              className="flex flex-col items-center justify-center p-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
            >
              <PrinterIcon className="h-5 w-5 text-gray-600 mb-1" />
              <span className="text-xs text-gray-600">Print</span>
            </button>
            <button
              onClick={shareQR}
              className="flex flex-col items-center justify-center p-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
            >
              <ShareIcon className="h-5 w-5 text-gray-600 mb-1" />
              <span className="text-xs text-gray-600">Share</span>
            </button>
          </div>

          {/* Info */}
          <div className="flex items-center justify-center text-green-600 text-sm">
            <CheckCircleIcon className="h-4 w-4 mr-2" />
            <span>Scan with any QR code reader</span>
          </div>
        </div>
      )}

      {/* Data Preview */}
      {typeof data === 'string' && data.length < 100 && (
        <div className="mt-4 p-3 bg-gray-50 rounded-lg">
          <p className="text-xs text-gray-600 font-mono break-all">{data}</p>
        </div>
      )}
    </motion.div>
  );
};

export default QRGenerator;
